//
//  UIColor.swift
//  BlockCam2
//
//  Created by Stuart Rankin on 4/24/21.
//

import Foundation
import UIKit
import simd

extension UIColor
{
    /// Create a UIColor using a hex string generated by `Hex` using the format `#rrggbbaa` or
    /// `#rrggbb`.
    /// - Note: The format of `HexString` is `#rrggbbaa` where `rr`, `gg`, `bb`, and `aa`
    ///         are all hexidecimal values. Badly formatted strings will result in nil
    ///         being returned.
    /// - Parameter HexString: The string to use as the source value for the color.
    /// - Parameter RGBA: Determines the expected order of the channels. If this parameter is `true`, channels
    ///                   are expected in RGBA order. If this parameter is false, channels are expected in
    ///                   ARGB order.
    /// - Returns: Nil on error, UIColor on success.
    convenience init?(HexString: String, RGBA: Bool = true)
    {
        if RGBA
        {
            if let (Red, Green, Blue, Alpha) = Utility.ColorChannelsFromRGBA(HexString)
            {
                self.init(red: Red, green: Green, blue: Blue, alpha: Alpha)
            }
            else
            {
                return nil
            }
        }
        else
        {
            if let (Red, Green, Blue, Alpha) = Utility.ColorChannelsFromARGB(HexString)
            {
                self.init(red: Red, green: Green, blue: Blue, alpha: Alpha)
            }
            else
            {
                return nil
            }
        }
    }
    
    /// Converts a raw hex value (prefixed by one of: "0x", "0X", or "#") into a `UIColor`. **Color order is: rrggbbaa or rrggbb.**
    /// - Note: From code in Fouris.
    /// - Parameter RawString: The raw hex string to convert.
    /// - Returns: Tuple of color channel information.
    public static func ColorChannelsFromRGBA(_ RawString: String) -> (Red: CGFloat, Green: CGFloat, Blue: CGFloat, Alpha: CGFloat)?
    {
        var Working = RawString.trimmingCharacters(in: .whitespacesAndNewlines)
        if Working.isEmpty
        {
            return nil
        }
        if Working.uppercased().starts(with: "0X")
        {
            Working = Working.replacingOccurrences(of: "0x", with: "")
            Working = Working.replacingOccurrences(of: "0X", with: "")
        }
        if Working.starts(with: "#")
        {
            Working = Working.replacingOccurrences(of: "#", with: "")
        }
        switch Working.count
        {
            case 8:
                if let Value = UInt(Working, radix: 16)
                {
                    let Red: CGFloat = CGFloat((Value & 0xff000000) >> 24) / 255.0
                    let Green: CGFloat = CGFloat((Value & 0x00ff0000) >> 16) / 255.0
                    let Blue: CGFloat = CGFloat((Value & 0x0000ff00) >> 8) / 255.0
                    let Alpha: CGFloat = CGFloat((Value & 0x000000ff) >> 0) / 255.0
                    return (Red: Red, Green: Green, Blue: Blue, Alpha: Alpha)
                }
                
            case 6:
                if let Value = UInt(Working, radix: 16)
                {
                    let Red: CGFloat = CGFloat((Value & 0xff0000) >> 16) / 255.0
                    let Green: CGFloat = CGFloat((Value & 0x00ff00) >> 8) / 255.0
                    let Blue: CGFloat = CGFloat((Value & 0x0000ff) >> 0) / 255.0
                    return (Red: Red, Green: Green, Blue: Blue, Alpha: 1.0)
                }
                
            default:
                break
        }
        return nil
    }
    
    /// Create an NSColor using a value interpreted as a hex color value. See also `NSColor(RGB:)`.
    /// - Parameter RGBA: Value to convert to a color. Value is assumed to be in the format of `rrggbbaa`.
    /// - Returns: `NSColor` based on the passed value.
    convenience init(RGBA: UInt)
    {
        var Red: UInt = 0
        var Green: UInt = 0
        var Blue: UInt = 0
        var Alpha: UInt = 0xff
        
        Red = RGBA & 0xff000000
        Red = Red >> 24
        Green = RGBA & 0x00ff0000
        Green = Green >> 16
        Blue = RGBA & 0x0000ff00
        Blue = Blue >> 8
        Alpha = RGBA & 0x000000ff
        Alpha = Alpha >> 0
        
        let FinalRed: CGFloat = CGFloat(Red) / 255.0
        let FinalGreen: CGFloat = CGFloat(Green) / 255.0
        let FinalBlue: CGFloat = CGFloat(Blue) / 255.0
        let FinalAlpha: CGFloat = CGFloat(Alpha) / 255.0
        self.init(red: FinalRed, green: FinalGreen, blue: FinalBlue, alpha: FinalAlpha)
    }
    
    /// Create an NSColor using a value interpreted as a hex color value. The value to convert is assumed
    /// to be an RGB value. See also `NSColor(RGBA:)`.
    /// - Warning: If the value of `RGB` is greater than `0xffffff` a fatal error will be thrown.
    /// - Parameter RGB: Value to convert to a color in the format `rrggbb`. Alpha is assigned 1.0.
    /// - Returns: `NSColor` base on the passed value.
    convenience init(RGB: Int)
    {
        if RGB > 0xffffff
        {
            fatalError("RGB value of \(RGB) is too big to convert to a color.")
        }
        
        var Red = RGB & 0xff0000
        Red = Red >> 16
        var Green = RGB & 0x00ff00
        Green = Green >> 8
        let Blue = RGB & 0x0000ff >> 0
        
        let FinalRed: CGFloat = CGFloat(Red) / 255.0
        let FinalGreen: CGFloat = CGFloat(Green) / 255.0
        let FinalBlue: CGFloat = CGFloat(Blue) / 255.0
        self.init(red: FinalRed, green: FinalGreen, blue: FinalBlue, alpha: 1.0)
    }
    
    /// Returns the integer value of the color in the form of RRGGBB.
    var RGB: Int
    {
        get
        {
            let R = Int(255.0 * self.r)
            let G = Int(255.0 * self.g)
            let B = Int(255.0 * self.b)
            let Final = (R << 16) + (G << 8) + B
            return Final
        }
    }
    
    /// Returns the normalized red value.
    var r: CGFloat
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Red
        }
    }
    
    /// Returns the normalized green value.
    var g: CGFloat
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Green
        }
    }
    
    /// Returns the normalized blue value.
    var b: CGFloat
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Blue
        }
    }
    
    /// Returns the normalized alpha value.
    var a: CGFloat
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Alpha
        }
    }
    
    /// Returns the red value as an integer from 0 to 255.
    var dn_r: Int
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Int(Red * 255.0)
        }
    }
    
    /// Returns the green value as an integer from 0 to 255.
    var dn_g: Int
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Int(Green * 255.0)
        }
    }
    
    /// Returns the blue value as an integer from 0 to 255.
    var dn_b: Int
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Int(Blue * 255.0)
        }
    }
    
    /// Returns the alpha value as an integer from 0 to 255.
    var dn_a: Int
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            return Int(Alpha * 255.0)
        }
    }
    
    
    /// Convert an instance of a UIColor to a SIMD float4 structure.
    /// - Returns: SIMD float4 equivalent of the instance color.
    func ToFloat4() -> simd_float4
    {
        var FVals = [Float]()
        var Red: CGFloat = 0.0
        var Green: CGFloat = 0.0
        var Blue: CGFloat = 0.0
        var Alpha: CGFloat = 1.0
        self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
        FVals.append(Float(Red))
        FVals.append(Float(Green))
        FVals.append(Float(Blue))
        FVals.append(Float(Alpha))
        let Result = simd_float4(FVals)
        return Result
    }
    
    /// Convert a SIMD float4 structure into a UIColor.
    /// - Parameter Float4: The SIMD float4 structure whose values will be converted into a UIColor.
    /// - Returns: UIColor equivalent of the passed SIMD float4 set of values.
    static func From(Float4: simd_float4) -> UIColor
    {
        let NewColor = UIColor(red: CGFloat(Float4.w), green: CGFloat(Float4.x),
                               blue: CGFloat(Float4.y), alpha: CGFloat(Float4.z))
        return NewColor
    }
    
    /// Determines the instance color is the same as the passed color. Both the instance color and the passed
    /// color channels are converted to integers before being compared.
    /// - Parameter As: The color to compare to the instance color.
    /// - Returns: True if the colors are the same, false if not.
    func IsSame(As: UIColor) -> Bool
    {
        let red = Int(As.r * 255.0)
        let green = Int(As.g * 255.0)
        let blue = Int(As.b * 255.0)
        return self.dn_r == red && self.dn_g == green && self.dn_b == blue
    }
    
    /// Determines the instance color is the same as the passed color. Both the instance color and the passed
    /// color channels are converted to integers before being compared.
    /// - Parameter HexValue: The value of the color to compare to the instance color.
    /// - Returns: True if the colors are the same, false if not.
    func IsSame(HexValue: Int) -> Bool
    {
        let red = (HexValue >> 16) & 0xff
        let green = (HexValue >> 8) & 0xff
        let blue = (HexValue) & 0xff
        return self.dn_r == red && self.dn_g == green && self.dn_b == blue
    }
    
    /// Returns the hue, saturation, and brightness channels. Convenience property for calling
    /// getHue on the color.
    /// - Note: If the instance color cannot be converted to the SRGB colorspace, all returned components
    ///         are set to `0.0`.
    var HSB: (H: CGFloat, S: CGFloat, B: CGFloat)
    {
        var Hue: CGFloat = 0.0
        var Saturation: CGFloat = 0.0
        var Brightness: CGFloat = 0.0
        var Alpha: CGFloat = 0.0
        self.getHue(&Hue, saturation: &Saturation, brightness: &Brightness, alpha: &Alpha)
        return (H: Hue, S: Saturation, B: Brightness)
    }
    
    /// Convert the instance color to CMYK channels.
    /// - Note: No color profiles are used - just the naive algorithm.
    /// - Returns: Tuple with cyan, magenta, yellow, and black channels, each mutliplied by 100.0.
    func ToCMYK() -> (Cyan: CGFloat, Magenta: CGFloat, Yellow: CGFloat, Black: CGFloat)
    {
        let RGB = self
        var Red: CGFloat = 0.0
        var Green: CGFloat = 0.0
        var Blue: CGFloat = 0.0
        var Alpha: CGFloat = 0.0
        RGB.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
        let K = 1.0 - max(Red, Green, Blue)
        if K == 1.0
        {
            return (0.0, 0.0, 0.0, 100.0)
        }
        let C = (1.0 - Red - K) / (1.0 - K)
        let M = (1.0 - Green - K) / (1.0 - K)
        let Y = (1.0 - Blue - K) / (1.0 - K)
        return (C * 100.0, M * 100.0, Y * 100.0, K * 100.0)
    }
    
    /// Convert the passed CMYK channels to an equivalent set of RGB channels.
    /// - Note: Color profiles are not used in the conversion process.
    /// - Parameter Cyan: The cyan channel value.
    /// - Parameter Magenta: The magenta channel value.
    /// - Parameter Yellow: The yellow channel value.
    /// - Parameter Black: The black channel value.
    /// - Returns: Tuple with red, green, and blue channel values.
    public static func CMYKtoRGB(Cyan: CGFloat, Magenta: CGFloat, Yellow: CGFloat, Black: CGFloat) -> (Red: CGFloat, Green: CGFloat, Blue: CGFloat)
    {
        let R = (1.0 - Cyan) * (1.0 - Black)
        let G = (1.0 - Magenta) * (1.0 - Black)
        let B = (1.0 - Yellow) * (1.0 - Black)
        return (R, G, B)
    }
    
    /// Returns the value of the color as a hex string. The string has the prefix
    /// `#` and is in RGBA order.
    /// - Note: This property converts all colors to sRGB prior to conversion to a hex string.
    var Hex: String
    {
        get
        {
            let Working = self
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            Working.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            let IRed = Int(Red * 255.0)
            let SRed = String(format: "%02x", IRed)
            let IGreen = Int(Green * 255.0)
            let SGreen = String(format: "%02x", IGreen)
            let IBlue = Int(Blue * 255.0)
            let SBlue = String(format: "%02x", IBlue)
            let IAlpha = Int(Alpha * 255.0)
            let SAlpha = String(format: "%02x", IAlpha)
            let Final = "#" + SRed + SGreen + SBlue + SAlpha
            return Final
        }
    }
    
    /// Return a color based on the instance color but with the hue inverted (eg, `1.0 - self.Hue`).
    /// - Returns: Color based on the instance color but with an inverted hue.
    var InvertedHue: UIColor
    {
        let (H, S, B) = self.HSB
        let NewH = 1.0 - H
        return UIColor(hue: NewH, saturation: S, brightness: B, alpha: self.Alpha)
    }
    
    /// Returns the alpha value of the instance color.
    var Alpha: CGFloat
    {
        var Red: CGFloat = 0.0
        var Green: CGFloat = 0.0
        var Blue: CGFloat = 0.0
        var Alpha: CGFloat = 0.0
        self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
        return Alpha
    }
    
    /// Return a darkened version of the instance color.
    /// - Parameter By: The percent to darken the color. Multiplies this value by the brightness value of
    ///                 the instance color. If the caller ignores the context and passes a value greater than
    ///                 `1.0`, this function will lighten the color. Negative values are converted to positive
    ///                 values.
    /// - Returns: New color with the brightness channel modified as described in the `By` section.
    func Darker(By: CGFloat = 0.5) -> UIColor
    {
        let FinalBy = abs(By)
        let (H, S, B) = self.HSB
        let A = self.Alpha
        return UIColor(hue: H, saturation: S, brightness: B * FinalBy, alpha: A)
    }
    
    /// Returns the YUV equivalent of the instance color, in Y, U, V order.
    /// - See
    ///   - [YUV](https://en.wikipedia.org/wiki/YUV)
    ///   - [FourCC YUV to RGB Conversion](http://www.fourcc.org/fccyvrgb.php)
    var YUV: (Y: CGFloat, U: CGFloat, V: CGFloat)
    {
        get
        {
            let Wr: CGFloat = 0.299
            let Wg: CGFloat = 0.587
            let Wb: CGFloat = 0.114
            let Umax: CGFloat = 0.436
            let Vmax: CGFloat = 0.615
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            let Y = (Wr * Red) + (Wg * Green) + (Wb * Blue)
            let U = Umax * ((Blue - Y) / (1.0 - Wb))
            let V = Vmax * ((Red - Y) / (1.0 - Wr))
            return (Y, U, V)
        }
    }
    
    /// Returns the CMYK equivalent of the instance color, in C, M, Y, K order.
    var CMYK: (C: CGFloat, Y: CGFloat, M: CGFloat, K: CGFloat)
    {
        get
        {
            var Red: CGFloat = 0.0
            var Green: CGFloat = 0.0
            var Blue: CGFloat = 0.0
            var Alpha: CGFloat = 0.0
            self.getRed(&Red, green: &Green, blue: &Blue, alpha: &Alpha)
            let K: CGFloat = 1.0 - max(Red, max(Green, Blue))
            var C: CGFloat = 0.0
            var M: CGFloat = 0.0
            var Y: CGFloat = 0.0
            if K == 1.0
            {
                C = 1.0
            }
            else
            {
                C = abs((1.0 - Red - K) / (1.0 - K))
            }
            if K == 1.0
            {
                M = 1.0
            }
            else
            {
                M = abs((1.0 - Green - K) / (1.0 - K))
            }
            if K == 1.0
            {
                Y = 1.0
            }
            else
            {
                Y = abs((1.0 - Blue - K) / (1.0 - K))
            }
            return (C, M, Y, K)
        }
    }
    
}
